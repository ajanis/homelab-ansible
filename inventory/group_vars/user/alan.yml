---
firewall_exception: true
local_user_shell: /bin/zsh

vault_alan_ssh_prkivate_key: !vault |
  $ANSIBLE_VAULT;1.1;AES256
  65336464636164376538613036313563623735383231616239633438306435393261393063663038
  3834343439383562376136666334306237643235343539320a376365376464326261616236333363
  66653962613463636337303566376162613335303062363631663262656334306238336432626465
  6637303531306230330a313866616263396132376163623435366563346531336261323033306430
  34633139396664663037376631353030656437303539623265663530613964633632616565323435
  34333564646661353837386439363664313663393931373238616265343831643235316637366530
  65393130316433353764356236633331306130306537313134313939666633623139393133313430
  62356432376238303638386636333437363438323638306632396561326432643866313333346163
  63386166623233336164666132363661633136393262353062303438623733303034303731393264
  64633163306337316632363265353465626531666239316138376236353664633638383465353765
  65353664306535653863393539353866623533336361393962333962313930376136363064343061
  65623138316434336663346130653238303738313662633464343733656638373962313639306438
  63326234306438653361623838376665643630613338363961383461643635376139326438623933
  66656538383664396235623933393838656234326133613963366139396462363534366336333438
  33623234636164643432396161666132376237656333623431396631326263383938306437333262
  37343533326538393466303966343936373938666630336438663639313434633233306561376631
  38656564343533616266313735393766383565653536373335313437623666346439336633656637
  31663132346135663837373866333235653634626231313330663563363534356331376233656137
  61323230313834623165386662613233626337366430306133623536346638323961383838633566
  61633035633763383831353834643766656630393664306538313536316462363739623538353865
  36623635646163353065653337663461383232666663633930343664306265616431396261316534
  39326563663261326165353438373339616461343364613861616532343234376165303737633737
  39653566373437353832316663383730663864323338343164643532643833613163653864653939
  30346563383335323238

vault_alan_ssh_public_key: !vault |
  $ANSIBLE_VAULT;1.1;AES256
  65376366333537386233613931303562663365303831393135653134356134333032313266643464
  3962653662623339316238363264383566376132636163360a303336646630396237313735653630
  36613263616565323863663363633337316365383062646164633437323162653830623161336535
  6366333734633537310a633337316464383339616535656565313866366632386437623734303964
  65636231663664646332653266666139376465636133373438366533623032646666643736323035
  36616364623261633566386562386661623938346135636133393934623535353066316539353435
  64373335333963626231346166623866346666626132363434383462646133333931323936636338
  64633539326462376663383632366538633333656161656463303737646537373631323261623137
  3432
homebrew_user_packages:
  - ajanis/custombrew/sshpass
  - ssh-copy-id
  - jq
  - yq
  - 1password-cli
  - sshuttle
  - parallel
  - freetype
  - tree
  - redis
  - telnet
  - tmux
  - screen
  - python
  - pyenv
  - pyenv-virtualenv
  - pyenv-pip-migrate
  - pyenv-ccache
  - git
  - nmap
  - lftp
  - ipmitool
  - p7zip
  - minicom
  - coreutils
  - spice-gtk
  - mas
  - xauth
  - ansible-lint
homebrew_user_taps:
  - ajanis/custombrew
homebrew_cask_user_packages:
  - font-3270-nerd-font
  - font-agave-nerd-font
  - font-anonymice-nerd-font
  - font-arimo-nerd-font
  - font-aurulent-nerd-font
  - font-bigblue-terminal-nerd-font
  - font-bitstream-vera-sans-mono-nerd-font
  - font-blex-mono-nerd-font
  - font-caskaydia-cove-nerd-font
  - font-code-new-roman-nerd-font
  - font-comic-shanns-mono-nerd-font
  - font-cousine-nerd-font
  - font-daddy-time-mono-nerd-font
  - font-dejavu-sans-mono-nerd-font
  - font-droid-sans-mono-nerd-font
  - font-envy-code-r-nerd-font
  - font-fantasque-sans-mono-nerd-font
  - font-fira-code-nerd-font
  - font-fira-mono-nerd-font
  - font-go-mono-nerd-font
  - font-gohufont-nerd-font
  - font-hack-nerd-font
  - font-hasklug-nerd-font
  - font-heavy-data-nerd-font
  - font-hurmit-nerd-font
  - font-im-writing-nerd-font
  - font-inconsolata-go-nerd-font
  - font-inconsolata-lgc-nerd-font
  - font-inconsolata-nerd-font
  - font-intone-mono-nerd-font
  - font-iosevka-nerd-font
  - font-iosevka-term-nerd-font
  - font-jetbrains-mono-nerd-font
  - font-lekton-nerd-font
  - font-liberation-nerd-font
  - font-lilex-nerd-font
  - font-meslo-lg-nerd-font
  - font-monocraft-nerd-font
  - font-monofur-nerd-font
  - font-monoid-nerd-font
  - font-mononoki-nerd-font
  - font-mplus-nerd-font
  - font-noto-nerd-font
  - font-open-dyslexic-nerd-font
  - font-overpass-nerd-font
  - font-profont-nerd-font
  - font-proggy-clean-tt-nerd-font
  - font-roboto-mono-nerd-font
  - font-sauce-code-pro-nerd-font
  - font-shure-tech-mono-nerd-font
  - font-space-mono-nerd-font
  - font-terminess-ttf-nerd-font
  - font-tinos-nerd-font
  - font-ubuntu-mono-nerd-font
  - font-ubuntu-nerd-font
  - font-victor-mono-nerd-font
  # - dropbox
  # - istat-menus
  # - gimp
  # - bartender
  - macfuse
  # - slack
  # - signal
  # - spotify
  # - sublime-text
  # - fluid
  # - viscosity
  # - moom
  # - iterm2

mas_email: !vault |
  $ANSIBLE_VAULT;1.1;AES256
  30316366393565363164303638383564336338653830303962636232643162653763643161373637
  6438306665613234386265633365343333376166356132640a336365633939366162326639333431
  39623539316232383237393331303139336462646139613536633466336666656535633535333663
  3762666435306234660a353362303534656439626365363934333731343037616431666662643938
  31353063336332633635313363373934373237653065666433353264383439633439

mas_password: !vault |
  $ANSIBLE_VAULT;1.1;AES256
  33383965653633353330626563633833663831346164326364396136663064323138363132623065
  3931316439663830303133313433373464336437633138310a663564323331633332303537353635
  37636430633434666337643234363564383536306463633161303835313263363631616138303330
  6531313732633530640a646530313039363965376463326265383433363965363566346265623661
  62636139613935316635356262313763343835303931373536343939326637356232

mas_upgrade_all_apps: true
mas_signin_dialog: false
user_has_sudo: true
mas_packages:
  - name: Amphetamine
    id: 937984704

python3_pkgs:
  - ansible
  - ansible-lint
  - docker
  - docker-compose
  - passlib
  - redis
  - ansible-tower-cli

ssh_private_key: "{{ vault_alan_ssh_private_key }}"

ssh_public_key: "{{ vault_alan_ssh_public_key }}"

git_config: |
  [user]
  	email = alan.janis@gmail.com
  	name = Alan Janis
  [core]
  	fileMode = true
  [alias]
  	pushall = !git remote | xargs -L1 -I R git push R master
    modpull = "!git submodule foreach \"git checkout -f master; git pull\""
    modpush = "!git submodule foreach \"git checkout -f master; git pushall\""

bash_profile: |
  # Bash profile that syncs bash profile and other pref files

  export PROMPT_COMMAND="history -a"
  shopt -s histappend

  export GITAWAREPROMPT="${HOME}/.bash/git-aware-prompt"
  source "${GITAWAREPROMPT}/main.sh"

  # If you use macports
  if [ -d {{ homebrew_install_path }} ]; then
    export PATH={{ homebrew_brew_bin_path }}:{{ homebrew_install_path }}/sbin:{{ homebrew_install_path }}/Cellar:/usr/local/bin:$PATH
  fi

  if [ -e "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" ]; then
    export EDITOR="'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl' -w"
  fi

  # Shell color options
  export force_color_prompt=yes
  export CLICOLOR=1
  export LSCOLORS=ExFxcxdxcxegedbxgxEbEg

  if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
  fi

  # colored GCC warnings and errors
  export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

  # some more ls aliases
  alias ll='ls -l'
  alias la='ls -A'
  alias l='ls -CF'

  # Bash Prompt
  case $TERM in
    xterm*|xterm|linux)
      export PS1="\[$txtred\]\h\[$txtcyn\] \u:\[$txtrst\]\w\[$txtwht\]\[$txtrst\]:\[$txtpur\]\$git_branch\[$txtrst\]\$git_status "
      ;;
    *)
      export PS1="\h:\w \u\$ "
      ;;
  esac

  if type brew 2&>/dev/null; then
    for completion_file in $(brew --prefix)/etc/bash_completion.d/*; do
      source "$completion_file"
    done
  fi

  ## PROFILEPUSH
  # custom function to push bash profile, ssh configs, vimrc, screenrc etc. to remote host


  # Serial to check against for updating remote hosts
  #profilepush:SERIAL:19052901

  # Add additional files with #profilepush:FILE:<filename>
  ##profilepush:FILE:.ssh/authorized_keys
  #profilepush:FILE:.bash_profile
  #profilepush:FILE:.bash
  #profilepush:FILE:.vimrc
  #profilepush:FILE:.vim
  #profilepush:FILE:.screenrc
  #profilepush:FILE:.ssh/config

  # Sync Function
  profilepush () {


  myHost=$1


  remoteVersion=0
  localVersion=`grep "^#profilepush:SERIAL:" ~/.bash_profile | awk 'BEGIN{FS=":"}{print $3}'`

  PUSH_HOME_HOSTS=.home_version_hosts

  if [ -d $PUSH_HOME_HOSTS ]; then
    if [ -f $PUSH_HOME_HOSTS/$myHost ]; then
      remoteVersion=`cat $PUSH_HOME_HOSTS/$myHost`
    else
      mkdir $PUSH_HOME_HOSTS
    fi
  fi

  if [ $remoteVersion -lt $localVersion ]; then
    myFiles=$(grep "^#profilepush:FILE:" ~/.bash_profile | awk -F : '{print $3}')
    echo Files: $myFiles

    ssh $myHost "if [ ! -d .ssh ]; then  mkdir $HOME/.ssh; fi | if [ ! -d .historyfiles ]; then mkdir .historyfiles; fi | if [ ! -d .home_version_hosts ]; then  mkdir .home_version_hosts; fi"

    ( for file in $( echo $myFiles); do cd ; rsync -avRLP $file $myHost:; done ) && echo $localVersion > $PUSH_HOME_HOSTS/$myHost
  fi

  ssh $myHost
  }

  # Per-Host History File
  export HISTFILE="${HOME}/.historyfiles/.bash_history.`hostname`"

  # TCPDUMP Alias for DHCP
  alias dhcptcpdump="tcpdump -vvv -s 0 '((port 67 or port 68) and (udp[8:1] = 0x1))'"

  # Home Assistant
  alias restartha='sudo systemctl restart home-assistant@homeassistant.service'
  alias stopha='sudo systemctl stop home-assistant@homeassistant.service'
  alias startha='sudo systemctl start home-assistant@homeassistant.service'
  alias cfgtest='/srv/homeassistant/bin/hass --script check_config'
  alias sourceha='source /srv/homeassistant/bin/activate'
  alias updateha='sourceha; pip3 install --upgrade homeassistant'

  # All-Purpose Aliases

  alias sbash='sudo bash -l'
  alias less=view
  alias more=view

  # pip installations
  alias ansible-pip="/usr/local/opt/ansible/libexec/bin/pip"
  alias brew-pip="/usr/local/opt/python/bin/pip"
  alias system-pip="/usr/local/bin/pip"
  export HOMEBREW_NO_INSTALL_CLEANUP=1
  export BASH_SILENCE_DEPRECATION_WARNING=1

  # Print <Last Regex Match> to end of file.
  # Useful for tailing the last timestamped log entry
  loglast() {
      for i in $@; do
        echo -e "\n\n\n $i.log \n\n"
        sed -n 'H; /^\[ Mon/h; ${x;p;}' $i
        done | ccze -A
  }

  export HOMEBREW_GITHUB_API_TOKEN={{ vault_homerew_github_api_token }}

  # Memory error logs
  alias memerr="grep 'memory read error' /var/log/kern.log | sed -r 's/([[:alpha:]]{3}\s[[:digit:]]{2}\s[[:digit:]]{2}:[[:digit:]]{2}).*CPU_SrcID#([[:digit:]]+).*Chan#([[:digit:]]+).*DIMM#([[:digit:]]+).*/\1 CPU:\2 Channel:\3 DIMM:\4/' | sort | uniq -c"

  # KVM Guest Info
  kvm-info () {
  printf "%-15s %-7s %-19s %-45s %-6s %-0s\n" "hostname" "vnic" "mac addr" "disk img" "vnc" "ip addr"
  for i in `sudo virsh list --all | tail -n +3 | awk '{print $2}'`; do
    echo $(sudo virsh dumpxml $i |
    egrep "(vnet|mac address|source file)" | cut -d "'" -f2) | while read img mac vnet; do
      vncport=$(virsh dumpxml $i| egrep "vnc" | cut -d "'" -f4)
      vncport=${vncport:="NA"}
      hostip=$(host $i | head -n1 | awk '{print $NF}')
      hostip=${hostip:="NA"}
      printf "%-15s %-7s %-19s %-45s %-6s %-15s\n" $i $vnet $mac $img $vncport $hostip
    done
  done
  }

  # Ceph DF Output
  cephdf () {
  echo
  echo "CEPH CLUSTER OVERVIEW"
  echo
  echo "==========================="
  echo "Cluster Services and Health"
  echo "==========================="
  ceph -s
  echo "================="
  echo "Storage Summary"
  echo "================="
  ceph df
  echo "HOSTS"
  ceph osd df  tree | egrep "host" | awk 'BEGIN {printf ("    %-10s %-10s %-10s %-10s %-10s\n", "NAME", "SIZE", "USED", "AVAIL", "%USED")} {printf("    %-10s %-10s %-10s %-10s %-10s\n",$14,$4$5,$6$7,$8$9,$10)}'
  }


  # MD5 comparison check for md5sum text and file
  md5check () {

  checkfile=$1
  checklist=$2

  if [ "$(grep $checkfile $checklist | awk '{print $1}')" == "$(md5 $checkfile | awk '{print $NF}')" ]; then
    echo -e "MD5 Sums $(tput setaf 1)MATCH"
  else
    echo -e "MD5 Sums $(tput setaf 1)DO NOT MATCH"
  fi
  }

  test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash"


  function anycon () {
  if [[ "$1" == "corp" ]]; then
      vpnagentchk
      HOST="https://vpn.wwt.com"
      USER="janisa"
      #read -s -p "PIN + RSA Token Code for ${USER}@${HOST} : " PASS
      read -s "PASS?PIN + RSA Token Code for $USER @ $HOST : "
      echo -e "\n\n"
      sudo /opt/cisco/anyconnect/bin/vpn -s connect "${HOST}" <<EOF
  $USER
  $PASS
  y
  EOF
      return
  elif [[ "$1" == "atc" ]]
      then
      vpnagentchk
      HOST="https://vpn.wwtatc.com/atc"
      USER="janisa"
      read -s "PASS?Password for $USER @ $HOST : "
      #read -s -p "Password for ${USER}@${HOST} : " PASS
      echo -e "\n\n"
      sudo /opt/cisco/anyconnect/bin/vpn -s connect "${HOST}" <<EOF
  $USER
  $PASS
  EOF
      return
  elif [[ "$1" == "vsg" ]]
      then
      vpnagentchk
      #HOST="https://ltcasa.wwt.com/ComcastForeman140634"
      HOST="https://naic2asa.wwt.com/ComcastForeman140634"
      USER="ComcastForeman1406341"
      #read -s -p "Password for ${USER}@${HOST} : " PASS
      read -s "PASS?Password for $USER @ $HOST :"
      echo -e "\n\n"
      sudo /opt/cisco/anyconnect/bin/vpn -s connect "${HOST}" <<EOF
  $USER
  $PASS
  y
  EOF
      return
  elif [[ "$1" == "disconnect" ]]
      then
      sudo /opt/cisco/anyconnect/bin/vpn -s disconnect
      #if [[ `pgrep -lf "Cisco AnyConnect Secure Mobility Client.app"` ]]
      #then
      #  pkill -lf "Cisco AnyConnect Secure Mobility Client.app"
        unload-wwt-security
      #fi
      return
  else
     echo "what's your game?"
     return
  fi
  }


  # Set up pyenv
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  if which pyenv >/dev/null; then
    eval "$(pyenv init -)"
  fi
  if which pyenv-virtualenv-init >/dev/null; then
    eval "$(pyenv virtualenv-init -)"
  fi

  function encrypt() {
    VARNAME=$1
    read -s "ENCRYPTSTRING?Value to encrypt for $VARNAME : "
    echo
    echo -n $ENCRYPTSTRING | ansible-vault encrypt_string --stdin-name $1 | tee >(pbcopy)
  }

ssh_config: |
  ForwardAgent yes
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
  ServerAliveInterval 240
  TCPKeepAlive yes
  LogLevel QUIET
  XAuthLocation /usr/X11/bin/xauth

  Host *
    IdentityAgent "~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"

  #Ceph Storage
  Host ceph01.home.prettybaked.com
  Hostname 10.0.20.127
  User root
  Host ceph02.home.prettybaked.com
  Hostname 10.0.20.128
  User root
  Host ceph03.home.prettybaked.com
  Hostname 10.0.20.129
  User root
  Host ceph04.home.prettybaked.com
  Hostname 10.0.20.130
  User root

  #Proxmox
  Host pve01.home.prettybaked.com
  Hostname 10.0.10.201
  User root
  Host pve02.home.prettybaked.com
  Hostname 10.0.10.202
  User root
  Host pve03.home.prettybaked.com
  Hostname 10.0.10.203
  User root
  Host pve04.home.prettybaked.com
  Hostname 10.0.10.204
  User root

  #Home
  Host *.home.prettybaked.com
  User ajanis

  #UDM Gateway
  Host udmpro
  Hostname 192.168.1.1
  User root

  #RetroPie Game Emulator
  Host retropie
  Hostname 10.0.11.185
  User pi

  #Bathroom Magic Mirror
  Host magicmirror
  Hostname 10.0.11.109
  User pi

  # Denko
  Host denko
  Hostname 192.168.10.210
  User root
  # MacMini
  Host macmini
  Hostname 192.168.10.10
  User macmini
  # Jeff-Plex
  Host plex01
  Hostname 192.168.10.60
  User ajanis
  # Jeff Mediaservices
  Host nzb01
  Hostname 192.168.10.70
  User ajanis
  # Jeff Utility / Webservices / Fileservices
  Host util01
  Hostname 192.168.10.137
  User ajanis

  Host liveimg
  Hostname 10.0.10.84
  User root
  LocalForward localhost:5901 10.0.10.84:5900
  RemoteCommand bash -c 'echo "Forwarding localhost:5900 to 10.0.10.135:8092"; read -r -d '' _'
  RequestTTY no

  Host arthur
  User root
  ForwardX11 yes


  Host jpmcbuild
  Hostname 10.0.30.10
  User root

zshrc: |
  # PATH
  export PATH={{ homebrew_brew_bin_path }}:{{ local_user_homedir }}/.pyenv/shims:{{ local_user_homedir }}/.local/bin:{{ homebrew_install_path }}/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/iTerm.app/Contents/Resources/utilities:/Library/Java/JavaVirtualMachines/jdk-15.0.2.jdk/Contents/Home/bin:$PATH
  {% raw %}
  # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
  # Initialization code that may require console input (password prompts, [y/n]
  # confirmations, etc.) must go above this block; everything else may go below.
  if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi

  # Path to your oh-my-zsh installation.
  export TERM="xterm-256color"
  export ZSH="$HOME/.oh-my-zsh"
  # Set name of the theme to load --- if set to "random", it will
  # load a random theme each time oh-my-zsh is loaded, in which case,
  # to know which specific one was loaded, run: echo $RANDOM_THEME
  # See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
  #ZSH_THEME="mrtazz"
  #ZSH_THEME="risto"
  #ZSH_THEME="pygmalion"
  #ZSH_THEME="kphoen"
  #ZSH_THEME="jreese"
  #ZSH_THEME="dpoggi"
  #ZSH_THEME="daveverwer"
  #ZSH_THEME="alanpeabody"
  #ZSH_THEME="blinks"
  ZSH_THEME="powerlevel10k/powerlevel10k"
  #ZSH_THEME="devicenull/devicenull"
  export APPLE_SSH_ADD_BEHAVIOR="macos"

  # Set list of themes to pick from when loading at random
  # Setting this variable when ZSH_THEME=random will cause zsh to load
  # a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
  # If set to an empty array, this variable will have no effect.
  # ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

  # Uncomment the following line to use case-sensitive completion.
  # CASE_SENSITIVE="true"

  # Uncomment the following line to use hyphen-insensitive completion.
  # Case-sensitive completion must be off. _ and - will be interchangeable.
  # HYPHEN_INSENSITIVE="true"

  # Uncomment the following line to disable bi-weekly auto-update checks.
  # DISABLE_AUTO_UPDATE="true"

  # Uncomment the following line to automatically update without prompting.
  # DISABLE_UPDATE_PROMPT="true"

  # Uncomment the following line to change how often to auto-update (in days).
  # export UPDATE_ZSH_DAYS=13

  # Uncomment the following line if pasting URLs and other text is messed up.
  # DISABLE_MAGIC_FUNCTIONS=true

  # Uncomment the following line to disable colors in ls.
  # DISABLE_LS_COLORS="true"

  # Uncomment the following line to disable auto-setting terminal title.
  # DISABLE_AUTO_TITLE="true"

  # Uncomment the following line to enable command auto-correction.
  #ENABLE_CORRECTION="true"

  # Uncomment the following line to display red dots whilst waiting for completion.
  #COMPLETION_WAITING_DOTS="true"

  # Uncomment the following line if you want to disable marking untracked files
  # under VCS as dirty. This makes repository status check for large repositories
  # much, much faster.
  # DISABLE_UNTRACKED_FILES_DIRTY="true"
  ZSH_DISABLE_COMPFIX="true"

  # Uncomment the following line if you want to change the command execution time
  # stamp shown in the history command output.
  # You can set one of the optional three formats:
  # "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
  # or set a custom format using the strftime function format specifications,
  # see 'man strftime' for details.
  HIST_STAMPS="mm.dd.yyyy"

  # Would you like to use another custom folder than $ZSH/custom?
  # ZSH_CUSTOM=/path/to/new-custom-folder

  # Which plugins would you like to load?
  # Standard plugins can be found in ~/.oh-my-zsh/plugins/*
  # Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
  # Example format: plugins=(rails git textmate ruby lighthouse)
  # Add wisely, as too many plugins slow down shell startup.
  plugins=(
    git
    macos
    ansible
    cp
    copyfile
    copypath
    debian
    docker
    git
    git-auto-fetch
    git-extras
    github
    gitignore
    git-prompt
    pip
    python
    pylint
    screen
    sublime
    virtualenv
  )


  source $ZSH/oh-my-zsh.sh

  # User configuration

  # export MANPATH="/usr/local/man:$MANPATH"

  # You may need to manually set your language environment
  # export LANG=en_US.UTF-8

  # Compilation flags
  export ARCHFLAGS="-arch x86_64"

  # Set personal aliases, overriding those provided by oh-my-zsh libs,
  # plugins, and themes. Aliases can be placed here, though oh-my-zsh
  # users are encouraged to define aliases within the ZSH_CUSTOM folder.
  # For a full list of active aliases, run `alias`.

  # Preferred editor for local and remote sessions
  if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
  else
  export EDITOR='vim'
  fi
  # Home Assistant
  alias restartha='sudo systemctl restart home-assistant@homeassistant.service'
  alias stopha='sudo systemctl stop home-assistant@homeassistant.service'
  alias startha='sudo systemctl start home-assistant@homeassistant.service'
  alias cfgtest='/srv/homeassistant/bin/hass --script check_config'
  alias sourceha='source /srv/homeassistant/bin/activate'
  alias updateha='sourceha; pip3 install --upgrade homeassistant'

  # All-Purpose Aliases
  alias cephstatus='ssh ajanis@ceph01 "$(typeset -f cephdf); cephdf"'
  alias sroot='sudo zsh -l'
  alias less=view
  alias more=view
  alias zshconfig="code ~/.zshrc"
  alias ohmyzsh="code ~/.oh-my-zsh"
  alias dhcptcpdump="tcpdump -vvv -s 0 '((port 67 or port 68) and (udp[8:1] = 0x1))'"
  alias flush-dns-cache="sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache"
  alias ssh-add-all='find ~/.ssh -name "id_*" ! -name "*.pub" -maxdepth 1 -exec ssh-add --apple-load-keychain {} \;'
  # pip installations
  alias system-pip="/usr/local/bin/pip"
  # Print <Last Regex Match> to end of file.
  # Useful for tailing the last timestamped log entry


  colortable () {
  for i in {0..255}; do
    print -Pn "%${i}F${(l:3::0:)i}%f " ${${(M)$((i%8)):#7}:+$'\n'}
  done
  }
  loglast() {
      for i in $@; do
        echo -e "\n\n\n $i.log \n\n"
        sed -n 'H; /^\[ Mon/h; ${x;p;}' $i
        done | ccze -A
  }


  # Memory error logs
  alias memerr="grep 'memory read error' /var/log/kern.log | sed -r 's/([[:alpha:]]{3}\s[[:digit:]]{2}\s[[:digit:]]{2}:[[:digit:]]{2}).*CPU_SrcID#([[:digit:]]+).*Chan#([[:digit:]]+).*DIMM#([[:digit:]]+).*/\1 CPU:\2 Channel:\3 DIMM:\4/' | sort | uniq -c"

  # KVM Guest Info
  kvm-info () {
  if [[ -z $1 ]]; then
    HYPERVISORS="trillian zaphod arthur ford devastator"
  else
    HYPERVISORS="$@"
  fi
    for h in $HYPERVISORS; do
      ssh ajanis@${h} "$(typeset -f kvmstats); kvmstats"
    done
  }
  kvmstats () {
    printf "%-15s %-7s %-19s %-75s %-10s %-10s %-0s\n" "hostname" "vnic" "mac" "diskimg" "console" "conport" "ip"
    for i in `sudo virsh list --all | tail -n +3 | awk '{print $2}'`; do
      echo $(sudo virsh dumpxml $i |
      egrep "(vnet|mac address|source file)" | cut -d "'" -f2) | while read img mac vnet; do
        consoletype=$(sudo virsh dumpxml $i | egrep "graphics type" | cut -d "'" -f2)
        consoletype=${consoletype:="NA"}
        consoleport=$(sudo virsh dumpxml $i | egrep "graphics type" | cut -d "'" -f4)
        consoleport=${consoleport:="NA"}
        hostip=$(host $i | head -n1 | awk '{print $NF}')
        hostip=${hostip:="NA"}
        printf "%-15s %-7s %-19s %-75s %-10s %-10s %-0s\n" $i $vnet $mac $img $consoletype $consoleport $hostip
      done
    done
  }

  # Ceph DF Output
  cephdf () {
  echo
  echo "CEPH CLUSTER OVERVIEW"
  echo
  echo "==========================="
  echo "Cluster Services and Health"
  echo "==========================="
  ceph -s
  echo "================="
  echo "Storage Summary"
  echo "================="
  ceph df
  echo "HOSTS"
  ceph osd df  tree | egrep "host" | awk 'BEGIN {printf ("    %-10s %-10s %-10s %-10s %-10s\n", "NAME", "SIZE", "USED", "AVAIL", "%USED")} {printf("    %-10s %-10s %-10s %-10s %-10s\n",$14,$4$5,$6$7,$8$9,$10)}'
  }

  sync-local-roles () {
    if [[ -z $1 ]]; then
      read "Name of role to synchronize: ansible-"
    fi
    rsync -avp --exclude "meta/" ~/.ansible/roles/${1}/ ~/Documents/ansible-roles/ansible-${1}/
  }
  sync-remote-roles () {
    if [[ -z $1 ]]; then
      read "Name of role to synchronize: ${1}"
    fi
    rsync -avp --exclude "meta/" ~/Documents/ansible-roles/ansible-${1}/ ~/.ansible/roles/${1}/
  }
  role_status () {
    if [[ -n $1 ]]; then
      if [[ $1 == 'all' ]]; then
        for ROLEPATH in $(find $HOME/Documents/ansible-roles -type d -maxdepth 1 -name "ansible-*"); do
          cd ${ROLEPATH}
          echo ${ROLENAME}
          git status
          cd $HOME
        done
      else
        export ROLENAME=$1
        export ANSIBLEROLE=ansible-${ROLENAME}
        export ROLEPATH=$HOME/Documents/ansible-roles/${ANSIBLEROLE}
        cd ${ROLEPATH}
        echo ${ROLENAME}
        git status
        cd $HOME
      fi
    elif [[ -z $1 ]]; then
      read "ROLENAME?Name of role to pull ( Ex: [rolename] or [all] ) ansible- : "
      export ANSIBLEROLE=ansible-${ROLENAME}
      export ROLEPATH=$HOME/Documents/ansible-roles/${ANSIBLEROLE}
      cd ${ROLEPATH}
      echo ${ROLENAME}
      git status
      cd $HOME
    fi
  }
  pull-role () {
    if [[ -n $1 ]]; then
      if [[ $1 == 'all' ]]; then
        for ROLEPATH in $(find $HOME/Documents/ansible-roles -type d -maxdepth 1 -name "ansible-*"); do
          cd ${ROLEPATH}
          echo ${ROLENAME}
          git pull
          cd $HOME
        done
      else
        export ROLENAME=$1
        export ANSIBLEROLE=ansible-${ROLENAME}
        export ROLEPATH=$HOME/Documents/ansible-roles/${ANSIBLEROLE}
        cd ${ROLEPATH}
        echo ${ROLENAME}
        git pull
        cd $HOME
      fi
    elif [[ -z $1 ]]; then
      read "ROLENAME?Name of role to pull ( Ex: [rolename] or [all] ) ansible- : "
      export ANSIBLEROLE=ansible-${ROLENAME}
      export ROLEPATH=$HOME/Documents/ansible-roles/${ANSIBLEROLE}
      cd ${ROLEPATH}
      echo ${ROLENAME}
      git pull
      cd $HOME
    fi
  }


  encrypt () {
    if [[ -n $1 ]]; then
    export VARNAME=$1
    elif [[ -z $1 ]]; then
    read -s "VARNAME?Name of variable : "
    fi
    if [[ -f $2 ]]; then
        echo Encrypting contents of file: ${2:a}
        ENCRYPTSTRING=$(<$2:a)
        else
    read -s "ENCRYPTSTRING?Value to encrypt for $VARNAME : "
    fi
    echo
    echo -n $ENCRYPTSTRING | ansible-vault encrypt_string --stdin-name $VARNAME | tee >(pbcopy)
  }

  # 1password cli autocomplete
  eval "$(op completion zsh)"; compdef _op op

  # Set up pyenv
  export PYENV_ROOT="$HOME/.pyenv"
  if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi
  if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi

  # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

  # Add additional includes
  [[ ! -f ~/.spoc.zsh ]] || source ~/.spoc.zsh
  {% endraw %}

p10krc: |
  {% raw %}
  # Generated by Powerlevel10k configuration wizard on 2020-04-01 at 23:50 MDT.
  # Based on romkatv/powerlevel10k/config/p10k-classic.zsh, checksum 11985.
  # Wizard options: nerdfont-complete + powerline, large icons, classic, darkest, time,
  # angled separators, sharp heads, flat tails, 2 lines, solid, no frame, sparse,
  # many icons, concise.
  # Type `p10k configure` to generate another config.
  #
  # Config for Powerlevel10k with classic powerline prompt style. Type `p10k configure` to generate
  # your own config based on it.
  #
  # Tip: Looking for a nice color? Here's a one-liner to print colormap.
  #
  #   for i in {0..255}; do print -Pn "%${i}F${(l:3::0:)i}%f " ${${(M)$((i%8)):#7}:+$'\n'}; done

  # Temporarily change options.
  'builtin' 'local' '-a' 'p10k_config_opts'
  [[ ! -o 'aliases'         ]] || p10k_config_opts+=('aliases')
  [[ ! -o 'sh_glob'         ]] || p10k_config_opts+=('sh_glob')
  [[ ! -o 'no_brace_expand' ]] || p10k_config_opts+=('no_brace_expand')
  'builtin' 'setopt' 'no_aliases' 'no_sh_glob' 'brace_expand'

  () {
    emulate -L zsh
    setopt no_unset extended_glob
    zmodload zsh/langinfo
    if [[ ${langinfo[CODESET]:-} != (utf|UTF)(-|)8 ]]; then
      local LC_ALL=${${(@M)$(locale -a):#*.(utf|UTF)(-|)8}[1]:-en_US.UTF-8}
    fi

    # Unset all configuration options. This allows you to apply configiguration changes without
    # restarting zsh. Edit ~/.p10k.zsh and type `source ~/.p10k.zsh`.
    unset -m 'POWERLEVEL9K_*'

    # The list of segments shown on the left. Fill it with the most important segments.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(
        # =========================[ Line #1 ]=========================
        os_icon                 # os identifier
        dir                     # current directory
        vcs                     # git status
        # =========================[ Line #2 ]=========================
        newline
        prompt_char             # prompt symbol
    )

    # The list of segments shown on the right. Fill it with less important segments.
    # Right prompt on the last prompt line (where you are typing your commands) gets
    # automatically hidden when the input line reaches it. Right prompt above the
    # last prompt line gets hidden if it would overlap with left prompt.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(
        # =========================[ Line #1 ]=========================
        status                  # exit code of the last command
        command_execution_time  # duration of the last command
        background_jobs         # presence of background jobs
        virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)
        anaconda                # conda environment (https://conda.io/)
        pyenv                   # python environment (https://github.com/pyenv/pyenv)
        nodenv                  # node.js version from nodenv (https://github.com/nodenv/nodenv)
        nvm                     # node.js version from nvm (https://github.com/nvm-sh/nvm)
        nodeenv                 # node.js environment (https://github.com/ekalinin/nodeenv)
        # node_version          # node.js version
        # go_version            # go version (https://golang.org)
        # rust_version          # rustc version (https://www.rust-lang.org)
        # dotnet_version        # .NET version (https://dotnet.microsoft.com)
        rbenv                   # ruby version from rbenv (https://github.com/rbenv/rbenv)
        rvm                     # ruby version from rvm (https://rvm.io)
        kubecontext             # current kubernetes context (https://kubernetes.io/)
        terraform               # terraform workspace (https://www.terraform.io)
        aws                     # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html)
        # aws_eb_env            # aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/)
        # azure                 # azure account name (https://docs.microsoft.com/en-us/cli/azure)
        context                 # user@hostname
        nordvpn                 # nordvpn connection status, linux only (https://nordvpn.com/)
        ranger                  # ranger shell (https://github.com/ranger/ranger)
        # vpn_ip                # virtual private network indicator
        # ram                   # free RAM
        # load                  # CPU load
        time                    # current time
        # =========================[ Line #2 ]=========================
        newline
        # public_ip             # public IP address
        # proxy                 # system-wide http/https/ftp proxy
        # battery               # internal battery
        # example               # example user-defined segment (see prompt_example function below)
    )

    # To disable default icons for all segments, set POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION=''.
    #
    # To enable default icons for all segments, don't define POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION
    # or set it to '${P9K_VISUAL_IDENTIFIER}'.
    #
    # To remove trailing space from all default icons, set POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION
    # to '${P9K_VISUAL_IDENTIFIER% }'.
    #
    # To enable default icons for one segment (e.g., dir), set
    # POWERLEVEL9K_DIR_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER}'.
    #
    # To assign a specific icon to one segment (e.g., dir), set
    # POWERLEVEL9K_DIR_VISUAL_IDENTIFIER_EXPANSION='⭐'.
    #
    # To assign a specific icon to a segment in a given state (e.g., dir in state NOT_WRITABLE),
    # set POWERLEVEL9K_DIR_NOT_WRITABLE_VISUAL_IDENTIFIER_EXPANSION='⭐'.
    #
    # Note: You can use $'\u2B50' instead of '⭐'. It's especially convenient when specifying
    # icons that your text editor cannot render. Don't forget to put $ and use single quotes when
    # defining icons via Unicode codepoints.
    #
    # Note: Many default icons cannot be displayed with system fonts. You'll need to install a
    # capable font to use them. See POWERLEVEL9K_MODE below.
    typeset -g POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER}'

    # This option makes a difference only when default icons are enabled for all or some prompt
    # segments (see POWERLEVEL9K_VISUAL_IDENTIFIER_EXPANSION above). LOCK_ICON can be printed as
    # $'\uE0A2', $'\uE138' or $'\uF023' depending on POWERLEVEL9K_MODE. The correct value of this
    # parameter depends on the provider of the font your terminal is using.
    #
    #   Font Provider                    | POWERLEVEL9K_MODE
    #   ---------------------------------+-------------------
    #   Powerline                        | powerline
    #   Font Awesome                     | awesome-fontconfig
    #   Adobe Source Code Pro            | awesome-fontconfig
    #   Source Code Pro                  | awesome-fontconfig
    #   Awesome-Terminal Fonts (regular) | awesome-fontconfig
    #   Awesome-Terminal Fonts (patched) | awesome-patched
    #   Nerd Fonts                       | nerdfont-complete
    #   Other                            | compatible
    #
    # If this looks overwhelming, either stick with a preinstalled system font and set
    # POWERLEVEL9K_MODE=compatible, or install the recommended Powerlevel10k font from
    # https://github.com/romkatv/powerlevel10k/#recommended-meslo-nerd-font-patched-for-powerlevel10k
    # and set POWERLEVEL9K_MODE=nerdfont-complete.
    typeset -g POWERLEVEL9K_MODE=nerdfont-complete

    # When set to true, icons appear before content on both sides of the prompt. When set
    # to false, icons go after content. If empty or not set, icons go before content in the left
    # prompt and after content in the right prompt.
    #
    # You can also override it for a specific segment:
    #
    #   POWERLEVEL9K_STATUS_ICON_BEFORE_CONTENT=false
    #
    # Or for a specific segment in specific state:
    #
    #   POWERLEVEL9K_DIR_NOT_WRITABLE_ICON_BEFORE_CONTENT=false
    typeset -g POWERLEVEL9K_ICON_BEFORE_CONTENT=

    # Add an empty line before each prompt.
    typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true

    # Connect left prompt lines with these symbols. You'll probably want to use the same color
    # as POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND below.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=
    typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_PREFIX=
    typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=
    # Connect right prompt lines with these symbols.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_SUFFIX=
    typeset -g POWERLEVEL9K_MULTILINE_NEWLINE_PROMPT_SUFFIX=
    typeset -g POWERLEVEL9K_MULTILINE_LAST_PROMPT_SUFFIX=

    # Filler between left and right prompt on the first prompt line. You can set it to ' ', '·' or
    # '─'. The last two make it easier to see the alignment between left and right prompt and to
    # separate prompt from command output. You might want to set POWERLEVEL9K_PROMPT_ADD_NEWLINE=false
    # for more compact prompt if using using this option.
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR='─'
    typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_BACKGROUND=
    if [[ $POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_CHAR != ' ' ]]; then
      # The color of the filler. You'll probably want to match the color of POWERLEVEL9K_MULTILINE
      # ornaments defined above.
      typeset -g POWERLEVEL9K_MULTILINE_FIRST_PROMPT_GAP_FOREGROUND=238
      # Start filler from the edge of the screen if there are no left segments on the first line.
      typeset -g POWERLEVEL9K_EMPTY_LINE_LEFT_PROMPT_FIRST_SEGMENT_END_SYMBOL='%{%}'
      # End filler on the edge of the screen if there are no right segments on the first line.
      typeset -g POWERLEVEL9K_EMPTY_LINE_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='%{%}'
    fi

    # Default background color.
    typeset -g POWERLEVEL9K_BACKGROUND=234

    # Separator between same-color segments on the left.
    typeset -g POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR='%242F\uE0B1'
    # Separator between same-color segments on the right.
    typeset -g POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR='%242F\uE0B3'
    # Separator between different-color segments on the left.
    typeset -g POWERLEVEL9K_LEFT_SEGMENT_SEPARATOR='\uE0B0'
    # Separator between different-color segments on the right.
    typeset -g POWERLEVEL9K_RIGHT_SEGMENT_SEPARATOR='\uE0B2'
    # The right end of left prompt.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL='\uE0B0'
    # The left end of right prompt.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_FIRST_SEGMENT_START_SYMBOL='\uE0B2'
    # The left end of left prompt.
    typeset -g POWERLEVEL9K_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL=''
    # The right end of right prompt.
    typeset -g POWERLEVEL9K_RIGHT_PROMPT_LAST_SEGMENT_END_SYMBOL=''
    # Left prompt terminator for lines without any segments.
    typeset -g POWERLEVEL9K_EMPTY_LINE_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=

    #################################[ os_icon: os identifier ]##################################
    # OS identifier color.
    typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=255
    # Make the icon bold.
    typeset -g POWERLEVEL9K_OS_ICON_CONTENT_EXPANSION='%B${P9K_CONTENT}'

    ################################[ prompt_char: prompt symbol ]################################
    # Transparent background.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_BACKGROUND=
    # Green prompt symbol if the last command succeeded.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS}_FOREGROUND=76
    # Red prompt symbol if the last command failed.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS}_FOREGROUND=196
    # Default prompt symbol.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='❯'
    # Prompt symbol in command vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VICMD_CONTENT_EXPANSION='❮'
    # Prompt symbol in visual vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIVIS_CONTENT_EXPANSION='Ⅴ'
    # Prompt symbol in overwrite vi mode.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIOWR_CONTENT_EXPANSION='▶'
    typeset -g POWERLEVEL9K_PROMPT_CHAR_OVERWRITE_STATE=true
    # No line terminator if prompt_char is the last segment.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_LAST_SEGMENT_END_SYMBOL=
    # No line introducer if prompt_char is the first segment.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_PROMPT_FIRST_SEGMENT_START_SYMBOL=
    # No surrounding whitespace.
    typeset -g POWERLEVEL9K_PROMPT_CHAR_LEFT_{LEFT,RIGHT}_WHITESPACE=

    ##################################[ dir: current directory ]##################################
    # Default current directory color.
    typeset -g POWERLEVEL9K_DIR_FOREGROUND=31
    # If directory is too long, shorten some of its segments to the shortest possible unique
    # prefix. The shortened directory can be tab-completed to the original.
    typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_to_unique
    # Replace removed segment suffixes with this symbol.
    typeset -g POWERLEVEL9K_SHORTEN_DELIMITER=
    # Color of the shortened directory segments.
    typeset -g POWERLEVEL9K_DIR_SHORTENED_FOREGROUND=103
    # Color of the anchor directory segments. Anchor segments are never shortened. The first
    # segment is always an anchor.
    typeset -g POWERLEVEL9K_DIR_ANCHOR_FOREGROUND=39
    # Display anchor directory segments in bold.
    typeset -g POWERLEVEL9K_DIR_ANCHOR_BOLD=true
    # Don't shorten directories that contain any of these files. They are anchors.
    local anchor_files=(
      .bzr
      .citc
      .git
      .hg
      .node-version
      .python-version
      .ruby-version
      .shorten_folder_marker
      .svn
      .terraform
      CVS
      Cargo.toml
      composer.json
      go.mod
      package.json
    )
    typeset -g POWERLEVEL9K_SHORTEN_FOLDER_MARKER="(${(j:|:)anchor_files})"
    # Don't shorten this many last directory segments. They are anchors.
    typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
    # Shorten directory if it's longer than this even if there is space for it. The value can
    # be either absolute (e.g., '80') or a percentage of terminal width (e.g, '50%'). If empty,
    # directory will be shortened only when prompt doesn't fit or when other parameters demand it
    # (see POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS and POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT below).
    typeset -g POWERLEVEL9K_DIR_MAX_LENGTH=80
    # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least this
    # many columns for typing commands.
    typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS=40
    # When `dir` segment is on the last prompt line, try to shorten it enough to leave at least
    # COLUMNS * POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT * 0.01 columns for typing commands.
    typeset -g POWERLEVEL9K_DIR_MIN_COMMAND_COLUMNS_PCT=50
    # If set to true, embed a hyperlink into the directory. Useful for quickly
    # opening a directory in the file manager simply by clicking the link.
    # Can also be handy when the directory is shortened, as it allows you to see
    # the full directory that was used in previous commands.
    typeset -g POWERLEVEL9K_DIR_HYPERLINK=false

    # Enable special styling for non-writable directories.
    typeset -g POWERLEVEL9K_DIR_SHOW_WRITABLE=true
    # Show this icon when the current directory is not writable. POWERLEVEL9K_DIR_SHOW_WRITABLE
    # above must be set to true for this parameter to have effect.
    # typeset -g POWERLEVEL9K_DIR_NOT_WRITABLE_VISUAL_IDENTIFIER_EXPANSION='⭐'

    # Custom prefix.
    # typeset -g POWERLEVEL9K_DIR_PREFIX='%244Fin '

    # POWERLEVEL9K_DIR_CLASSES allows you to specify custom icons for different directories.
    # It must be an array with 3 * N elements. Each triplet consists of:
    #
    #   1. A pattern against which the current directory is matched. Matching is done with
    #      extended_glob option enabled.
    #   2. Directory class for the purpose of styling.
    #   3. Icon.
    #
    # Triplets are tried in order. The first triplet whose pattern matches $PWD wins. If there
    # are no matches, the directory will have no icon.
    #
    # Example:
    #
    #   typeset -g POWERLEVEL9K_DIR_CLASSES=(
    #       '~/work(/*)#'  WORK     '(╯°□°）╯︵ ┻━┻'
    #       '~(/*)#'       HOME     '⌂'
    #       '*'            DEFAULT  '')
    #
    # With these settings, the current directory in the prompt may look like this:
    #
    #   (╯°□°）╯︵ ┻━┻ ~/work/projects/important/urgent
    #
    # Or like this:
    #
    #   ⌂ ~/best/powerlevel10k
    #
    # You can also set different colors for directories of different classes. Remember to override
    # FOREGROUND, SHORTENED_FOREGROUND and ANCHOR_FOREGROUND for every directory class that you wish
    # to have its own color.
    #
    #   typeset -g POWERLEVEL9K_DIR_WORK_FOREGROUND=31
    #   typeset -g POWERLEVEL9K_DIR_WORK_SHORTENED_FOREGROUND=103
    #   typeset -g POWERLEVEL9K_DIR_WORK_ANCHOR_FOREGROUND=39
    #
    # typeset -g POWERLEVEL9K_DIR_CLASSES=()

    #####################################[ vcs: git status ]######################################
    # Branch icon. Set this parameter to '\uF126 ' for the popular Powerline branch icon.
    typeset -g POWERLEVEL9K_VCS_BRANCH_ICON='\uF126 '
    POWERLEVEL9K_VCS_BRANCH_ICON=${(g::)POWERLEVEL9K_VCS_BRANCH_ICON}

    # Untracked files icon. It's really a question mark, your font isn't broken.
    # Change the value of this parameter to show a different icon.
    typeset -g POWERLEVEL9K_VCS_UNTRACKED_ICON='?'
    POWERLEVEL9K_VCS_UNTRACKED_ICON=${(g::)POWERLEVEL9K_VCS_UNTRACKED_ICON}

    # Formatter for Git status.
    #
    # Example output: master ⇣42⇡42 *42 merge ~42 +42 !42 ?42.
    #
    # You can edit the function to customize how Git status looks.
    #
    # VCS_STATUS_* parameters are set by gitstatus plugin. See reference:
    # https://github.com/romkatv/gitstatus/blob/master/gitstatus.plugin.zsh.
    function my_git_formatter() {
      emulate -L zsh

      if [[ -n $P9K_CONTENT ]]; then
        # If P9K_CONTENT is not empty, use it. It's either "loading" or from vcs_info (not from
        # gitstatus plugin). VCS_STATUS_* parameters are not available in this case.
        typeset -g my_git_format=$P9K_CONTENT
        return
      fi

      if (( $1 )); then
        # Styling for up-to-date Git status.
        local       meta='%244F'  # grey foreground
        local      clean='%76F'   # green foreground
        local   modified='%178F'  # yellow foreground
        local  untracked='%39F'   # blue foreground
        local conflicted='%196F'  # red foreground
      else
        # Styling for incomplete and stale Git status.
        local       meta='%244F'  # grey foreground
        local      clean='%244F'  # grey foreground
        local   modified='%244F'  # grey foreground
        local  untracked='%244F'  # grey foreground
        local conflicted='%244F'  # grey foreground
      fi

      local res
      local where  # branch name, tag or commit
      if [[ -n $VCS_STATUS_LOCAL_BRANCH ]]; then
        res+="${clean}${POWERLEVEL9K_VCS_BRANCH_ICON}"
        where=${(V)VCS_STATUS_LOCAL_BRANCH}
      elif [[ -n $VCS_STATUS_TAG ]]; then
        res+="${meta}#"
        where=${(V)VCS_STATUS_TAG}
      else
        res+="${meta}@"
        where=${VCS_STATUS_COMMIT[1,8]}
      fi

      # If local branch name or tag is at most 32 characters long, show it in full.
      # Otherwise show the first 12 … the last 12.
      (( $#where > 32 )) && where[13,-13]="…"
      res+="${clean}${where//\%/%%}"  # escape %

      # Show tracking branch name if it differs from local branch.
      if [[ -n ${VCS_STATUS_REMOTE_BRANCH:#$VCS_STATUS_LOCAL_BRANCH} ]]; then
        res+="${meta}:${clean}${(V)VCS_STATUS_REMOTE_BRANCH//\%/%%}"  # escape %
      fi

      # ⇣42 if behind the remote.
      (( VCS_STATUS_COMMITS_BEHIND )) && res+=" ${clean}⇣${VCS_STATUS_COMMITS_BEHIND}"
      # ⇡42 if ahead of the remote; no leading space if also behind the remote: ⇣42⇡42.
      (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && res+=" "
      (( VCS_STATUS_COMMITS_AHEAD  )) && res+="${clean}⇡${VCS_STATUS_COMMITS_AHEAD}"
      # *42 if have stashes.
      (( VCS_STATUS_STASHES        )) && res+=" ${clean}*${VCS_STATUS_STASHES}"
      # 'merge' if the repo is in an unusual state.
      [[ -n $VCS_STATUS_ACTION     ]] && res+=" ${conflicted}${VCS_STATUS_ACTION}"
      # ~42 if have merge conflicts.
      (( VCS_STATUS_NUM_CONFLICTED )) && res+=" ${conflicted}~${VCS_STATUS_NUM_CONFLICTED}"
      # +42 if have staged changes.
      (( VCS_STATUS_NUM_STAGED     )) && res+=" ${modified}+${VCS_STATUS_NUM_STAGED}"
      # !42 if have unstaged changes.
      (( VCS_STATUS_NUM_UNSTAGED   )) && res+=" ${modified}!${VCS_STATUS_NUM_UNSTAGED}"
      # ?42 if have untracked files. It's really a question mark, your font isn't broken.
      # See POWERLEVEL9K_VCS_UNTRACKED_ICON above if you want to use a different icon.
      # Remove the next line if you don't want to see untracked files at all.
      (( VCS_STATUS_NUM_UNTRACKED  )) && res+=" ${untracked}${POWERLEVEL9K_VCS_UNTRACKED_ICON}${VCS_STATUS_NUM_UNTRACKED}"

      typeset -g my_git_format=$res
    }
    functions -M my_git_formatter 2>/dev/null

    # Disable the default Git status formatting.
    typeset -g POWERLEVEL9K_VCS_DISABLE_GITSTATUS_FORMATTING=true
    # Install our own Git status formatter.
    typeset -g POWERLEVEL9K_VCS_CONTENT_EXPANSION='${$((my_git_formatter(1)))+${my_git_format}}'
    typeset -g POWERLEVEL9K_VCS_LOADING_CONTENT_EXPANSION='${$((my_git_formatter(0)))+${my_git_format}}'
    # Enable counters for staged, unstaged, etc.
    typeset -g POWERLEVEL9K_VCS_{STAGED,UNSTAGED,UNTRACKED,CONFLICTED,COMMITS_AHEAD,COMMITS_BEHIND}_MAX_NUM=-1

    # Icon color.
    typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_COLOR=76
    typeset -g POWERLEVEL9K_VCS_LOADING_VISUAL_IDENTIFIER_COLOR=244
    # Custom icon.
    # typeset -g POWERLEVEL9K_VCS_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_VCS_PREFIX='%244Fon '

    # Show status of repositories of these types. You can add svn and/or hg if you are
    # using them. If you do, your prompt may become slow even when your current directory
    # isn't in an svn or hg reposotiry.
    typeset -g POWERLEVEL9K_VCS_BACKENDS=(git)

    # These settings are used for respositories other than Git or when gitstatusd fails and
    # Powerlevel10k has to fall back to using vcs_info.
    typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=76
    typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=76
    typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=178

    ##########################[ status: exit code of the last command ]###########################
    # Enable OK_PIPE, ERROR_PIPE and ERROR_SIGNAL status states to allow us to enable, disable and
    # style them independently from the regular OK and ERROR state.
    typeset -g POWERLEVEL9K_STATUS_EXTENDED_STATES=true

    # Status on success. No content, just an icon. No need to show it if prompt_char is enabled as
    # it will signify success by turning green.
    typeset -g POWERLEVEL9K_STATUS_OK=false
    typeset -g POWERLEVEL9K_STATUS_OK_FOREGROUND=70
    typeset -g POWERLEVEL9K_STATUS_OK_VISUAL_IDENTIFIER_EXPANSION='✔'

    # Status when some part of a pipe command fails but the overall exit status is zero. It may look
    # like this: 1|0.
    typeset -g POWERLEVEL9K_STATUS_OK_PIPE=true
    typeset -g POWERLEVEL9K_STATUS_OK_PIPE_FOREGROUND=70
    typeset -g POWERLEVEL9K_STATUS_OK_PIPE_VISUAL_IDENTIFIER_EXPANSION='✔'

    # Status when it's just an error code (e.g., '1'). No need to show it if prompt_char is enabled as
    # it will signify error by turning red.
    typeset -g POWERLEVEL9K_STATUS_ERROR=false
    typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=160
    typeset -g POWERLEVEL9K_STATUS_ERROR_VISUAL_IDENTIFIER_EXPANSION='↵'

    # Status when the last command was terminated by a signal.
    typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL=true
    typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_FOREGROUND=160
    # Use terse signal names: "INT" instead of "SIGINT(2)".
    typeset -g POWERLEVEL9K_STATUS_VERBOSE_SIGNAME=false
    typeset -g POWERLEVEL9K_STATUS_ERROR_SIGNAL_VISUAL_IDENTIFIER_EXPANSION='↵'

    # Status when some part of a pipe command fails and the overall exit status is also non-zero.
    # It may look like this: 1|0.
    typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE=true
    typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_FOREGROUND=160
    typeset -g POWERLEVEL9K_STATUS_ERROR_PIPE_VISUAL_IDENTIFIER_EXPANSION='↵'

    ###################[ command_execution_time: duration of the last command ]###################
    # Show duration of the last command if takes longer than this many seconds.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=3
    # Show this many fractional digits. Zero means round to seconds.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=0
    # Execution time color.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=248
    # Duration format: 1d 2h 3m 4s.
    typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FORMAT='d h m s'
    # Custom icon.
    # typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PREFIX='%244Ftook '

    #######################[ background_jobs: presence of background jobs ]#######################
    # Don't show the number of background jobs.
    typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE=false
    # Background jobs color.
    typeset -g POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND=37
    # Icon to show when there are background jobs.
    typeset -g POWERLEVEL9K_BACKGROUND_JOBS_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER}'

    ##########[ nordvpn: nordvpn connection status, linux only (https://nordvpn.com/) ]###########
    # NordVPN connection indicator color.
    typeset -g POWERLEVEL9K_NORDVPN_FOREGROUND=39
    # Hide NordVPN connection indicator when not connected.
    typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_CONTENT_EXPANSION=
    typeset -g POWERLEVEL9K_NORDVPN_{DISCONNECTED,CONNECTING,DISCONNECTING}_VISUAL_IDENTIFIER_EXPANSION=
    # Custom icon.
    # typeset -g POWERLEVEL9K_NORDVPN_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #################[ ranger: ranger shell (https://github.com/ranger/ranger) ]##################
    # Ranger shell color.
    typeset -g POWERLEVEL9K_RANGER_FOREGROUND=178
    # Custom icon.
    # typeset -g POWERLEVEL9K_RANGER_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ######################################[ ram: free RAM ]#######################################
    # RAM color.
    typeset -g POWERLEVEL9K_RAM_FOREGROUND=66
    # Custom icon.
    # typeset -g POWERLEVEL9K_RAM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ######################################[ load: CPU load ]######################################
    # Show average CPU load over this many last minutes. Valid values are 1, 5 and 15.
    typeset -g POWERLEVEL9K_LOAD_WHICH=5
    # Load color when load is under 50%.
    typeset -g POWERLEVEL9K_LOAD_NORMAL_FOREGROUND=66
    # Load color when load is between 50% and 70%.
    typeset -g POWERLEVEL9K_LOAD_WARNING_FOREGROUND=178
    # Load color when load is over 70%.
    typeset -g POWERLEVEL9K_LOAD_CRITICAL_FOREGROUND=166
    # Custom icon.
    # typeset -g POWERLEVEL9K_LOAD_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##################################[ context: user@hostname ]##################################
    # Default context color.
    typeset -g POWERLEVEL9K_CONTEXT_FOREGROUND=180
    # Default context format: %n is username, %m is hostname.
    typeset -g POWERLEVEL9K_CONTEXT_TEMPLATE='%n@%m'

    # Context color when running with privileges.
    typeset -g POWERLEVEL9K_CONTEXT_ROOT_FOREGROUND=178
    # Context format when running with privileges: %n is username, %m is hostname, %B for bold.
    typeset -g POWERLEVEL9K_CONTEXT_ROOT_TEMPLATE='%B%n@%m'

    # Don't show context unless running with privileges or in SSH.
    # Tip: Remove the next line to always show context.
    typeset -g POWERLEVEL9K_CONTEXT_{DEFAULT,SUDO}_{CONTENT,VISUAL_IDENTIFIER}_EXPANSION=

    # Custom icon.
    # typeset -g POWERLEVEL9K_CONTEXT_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_CONTEXT_PREFIX='%244Fwith '

    ###[ virtualenv: python virtual environment (https://docs.python.org/3/library/venv.html) ]###
    # Python virtual environment color.
    typeset -g POWERLEVEL9K_VIRTUALENV_FOREGROUND=37
    # Don't show Python version next to the virtual environment name.
    typeset -g POWERLEVEL9K_VIRTUALENV_SHOW_PYTHON_VERSION=false
    # Separate environment name from Python version only with a space.
    typeset -g POWERLEVEL9K_VIRTUALENV_{LEFT,RIGHT}_DELIMITER=
    # Custom icon.
    # typeset -g POWERLEVEL9K_VIRTUALENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #####################[ anaconda: conda environment (https://conda.io/) ]######################
    # Anaconda environment color.
    typeset -g POWERLEVEL9K_ANACONDA_FOREGROUND=37
    # Don't show Python version next to the anaconda environment name.
    typeset -g POWERLEVEL9K_ANACONDA_SHOW_PYTHON_VERSION=false
    # Separate environment name from Python version only with a space.
    typeset -g POWERLEVEL9K_ANACONDA_{LEFT,RIGHT}_DELIMITER=
    # Custom icon.
    # typeset -g POWERLEVEL9K_ANACONDA_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ################[ pyenv: python environment (https://github.com/pyenv/pyenv) ]################
    # Pyenv color.
    typeset -g POWERLEVEL9K_PYENV_FOREGROUND=37
    # Don't show the current Python version if it's the same as global.
    typeset -g POWERLEVEL9K_PYENV_PROMPT_ALWAYS_SHOW=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_PYENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ nodenv: node.js version from nodenv (https://github.com/nodenv/nodenv) ]##########
    # Nodenv color.
    typeset -g POWERLEVEL9K_NODENV_FOREGROUND=70
    # Don't show node version if it's the same as global: $(nodenv version-name) == $(nodenv global).
    typeset -g POWERLEVEL9K_NODENV_PROMPT_ALWAYS_SHOW=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##############[ nvm: node.js version from nvm (https://github.com/nvm-sh/nvm) ]###############
    # Nvm color.
    typeset -g POWERLEVEL9K_NVM_FOREGROUND=70
    # Custom icon.
    # typeset -g POWERLEVEL9K_NVM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ############[ nodeenv: node.js environment (https://github.com/ekalinin/nodeenv) ]############
    # Nodeenv color.
    typeset -g POWERLEVEL9K_NODEENV_FOREGROUND=70
    # Don't show Node version next to the environment name.
    typeset -g POWERLEVEL9K_NODEENV_SHOW_NODE_VERSION=false
    # Separate environment name from Node version only with a space.
    typeset -g POWERLEVEL9K_NODEENV_{LEFT,RIGHT}_DELIMITER=
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODEENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##############################[ node_version: node.js version ]###############################
    # Node version color.
    typeset -g POWERLEVEL9K_NODE_VERSION_FOREGROUND=70
    # Show node version only when in a directory tree containing package.json.
    typeset -g POWERLEVEL9K_NODE_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_NODE_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #######################[ go_version: go version (https://golang.org) ]########################
    # Go version color.
    typeset -g POWERLEVEL9K_GO_VERSION_FOREGROUND=37
    # Show go version only when in a go project subdirectory.
    typeset -g POWERLEVEL9K_GO_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_GO_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #################[ rust_version: rustc version (https://www.rust-lang.org) ]##################
    # Rust version color.
    typeset -g POWERLEVEL9K_RUST_VERSION_FOREGROUND=37
    # Show rust version only when in a rust project subdirectory.
    typeset -g POWERLEVEL9K_RUST_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_RUST_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ###############[ dotnet_version: .NET version (https://dotnet.microsoft.com) ]################
    # .NET version color.
    typeset -g POWERLEVEL9K_DOTNET_VERSION_FOREGROUND=134
    # Show .NET version only when in a .NET project subdirectory.
    typeset -g POWERLEVEL9K_DOTNET_VERSION_PROJECT_ONLY=true
    # Custom icon.
    # typeset -g POWERLEVEL9K_DOTNET_VERSION_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #############[ rbenv: ruby version from rbenv (https://github.com/rbenv/rbenv) ]##############
    # Rbenv color.
    typeset -g POWERLEVEL9K_RBENV_FOREGROUND=168
    # Don't show ruby version if it's the same as global: $(rbenv version-name) == $(rbenv global).
    typeset -g POWERLEVEL9K_RBENV_PROMPT_ALWAYS_SHOW=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_RBENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #######################[ rvm: ruby version from rvm (https://rvm.io) ]########################
    # Rvm color.
    typeset -g POWERLEVEL9K_RVM_FOREGROUND=168
    # Don't show @gemset at the end.
    typeset -g POWERLEVEL9K_RVM_SHOW_GEMSET=false
    # Don't show ruby- at the front.
    typeset -g POWERLEVEL9K_RVM_SHOW_PREFIX=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_RVM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ################[ terraform: terraform workspace (https://www.terraform.io) ]#################
    # Terraform color.
    typeset -g POWERLEVEL9K_TERRAFORM_FOREGROUND=38
    # Custom icon.
    # typeset -g POWERLEVEL9K_TERRAFORM_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #[ aws: aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) ]#
    # AWS profile color.
    typeset -g POWERLEVEL9K_AWS_FOREGROUND=208
    # Custom icon.
    # typeset -g POWERLEVEL9K_AWS_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #[ aws_eb_env: aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/) ]#
    # AWS Elastic Beanstalk environment color.
    typeset -g POWERLEVEL9K_AWS_EB_ENV_FOREGROUND=70
    # Custom icon.
    # typeset -g POWERLEVEL9K_AWS_EB_ENV_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ##########[ azure: azure account name (https://docs.microsoft.com/en-us/cli/azure) ]##########
    # Azure account name color.
    typeset -g POWERLEVEL9K_AZURE_FOREGROUND=32
    # Custom icon.
    # typeset -g POWERLEVEL9K_AZURE_VISUAL_IDENTIFIER_EXPANSION='⭐'

    #############[ kubecontext: current kubernetes context (https://kubernetes.io/) ]#############
    # Kubernetes context classes for the purpose of using different colors, icons and expansions with
    # different contexts.
    #
    # POWERLEVEL9K_KUBECONTEXT_CLASSES is an array with even number of elements. The first element
    # in each pair defines a pattern against which the current kubernetes context gets matched.
    # More specifically, it's P9K_CONTENT prior to the application of context expansion (see below)
    # that gets matched. If you unset all POWERLEVEL9K_KUBECONTEXT_*CONTENT_EXPANSION parameters,
    # you'll see this value in your prompt. The second element of each pair in
    # POWERLEVEL9K_KUBECONTEXT_CLASSES defines the context class. Patterns are tried in order. The
    # first match wins.
    #
    # For example, given these settings:
    #
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(
    #     '*prod*'  PROD
    #     '*test*'  TEST
    #     '*'       DEFAULT)
    #
    # If your current kubernetes context is "deathray-testing/default", its class is TEST
    # because "deathray-testing/default" doesn't match the pattern '*prod*' but does match '*test*'.
    #
    # You can define different colors, icons and content expansions for different classes:
    #
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_FOREGROUND=28
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_VISUAL_IDENTIFIER_EXPANSION='⭐'
    #   typeset -g POWERLEVEL9K_KUBECONTEXT_TEST_CONTENT_EXPANSION='> ${P9K_CONTENT} <'
    typeset -g POWERLEVEL9K_KUBECONTEXT_CLASSES=(
        # '*prod*'  PROD    # These values are examples that are unlikely
        # '*test*'  TEST    # to match your needs. Customize them as needed.
        '*'       DEFAULT)
    typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_FOREGROUND=134
    # typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_VISUAL_IDENTIFIER_EXPANSION='⭐'

    # Use POWERLEVEL9K_KUBECONTEXT_CONTENT_EXPANSION to specify the content displayed by kubecontext
    # segment. Parameter expansions are very flexible and fast, too. See reference:
    # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion.
    #
    # Within the expansion the following parameters are always available:
    #
    # - P9K_CONTENT                The content that would've been displayed if there was no content
    #                              expansion defined.
    # - P9K_KUBECONTEXT_NAME       The current context's name. Corresponds to column NAME in the
    #                              output of `kubectl config get-contexts`.
    # - P9K_KUBECONTEXT_CLUSTER    The current context's cluster. Corresponds to column CLUSTER in the
    #                              output of `kubectl config get-contexts`.
    # - P9K_KUBECONTEXT_NAMESPACE  The current context's namespace. Corresponds to column NAMESPACE
    #                              in the output of `kubectl config get-contexts`. If there is no
    #                              namespace, the parameter is set to "default".
    #
    # If the context points to Google Kubernetes Engine (GKE) or Elastic Kubernetes Service (EKS),
    # the following extra parameters are available:
    #
    # - P9K_KUBECONTEXT_CLOUD_NAME     Either "gke" or "eks".
    # - P9K_KUBECONTEXT_CLOUD_ACCOUNT  Account/project ID.
    # - P9K_KUBECONTEXT_CLOUD_ZONE     Availability zone.
    # - P9K_KUBECONTEXT_CLOUD_CLUSTER  Cluster.
    #
    # P9K_KUBECONTEXT_CLOUD_* parameters are derived from P9K_KUBECONTEXT_CLUSTER. For example,
    # if P9K_KUBECONTEXT_CLUSTER is "gke_my-account_us-east1-a_my-cluster-01":
    #
    #   - P9K_KUBECONTEXT_CLOUD_NAME=gke
    #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=my-account
    #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east1-a
    #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01
    #
    # If P9K_KUBECONTEXT_CLUSTER is "arn:aws:eks:us-east-1:123456789012:cluster/my-cluster-01":
    #
    #   - P9K_KUBECONTEXT_CLOUD_NAME=eks
    #   - P9K_KUBECONTEXT_CLOUD_ACCOUNT=123456789012
    #   - P9K_KUBECONTEXT_CLOUD_ZONE=us-east-1
    #   - P9K_KUBECONTEXT_CLOUD_CLUSTER=my-cluster-01
    typeset -g POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION=
    # Show P9K_KUBECONTEXT_CLOUD_CLUSTER if it's not empty and fall back to P9K_KUBECONTEXT_NAME.
    POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${P9K_KUBECONTEXT_CLOUD_CLUSTER:-${P9K_KUBECONTEXT_NAME}}'
    # Append the current context's namespace if it's not "default".
    POWERLEVEL9K_KUBECONTEXT_DEFAULT_CONTENT_EXPANSION+='${${:-/$P9K_KUBECONTEXT_NAMESPACE}:#/default}'

    # Custom prefix.
    # typeset -g POWERLEVEL9K_KUBECONTEXT_PREFIX='%244Fat '

    ###############################[ public_ip: public IP address ]###############################
    # Public IP color.
    typeset -g POWERLEVEL9K_PUBLIC_IP_FOREGROUND=94
    # Custom icon.
    # typeset -g POWERLEVEL9K_PUBLIC_IP_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ########################[ vpn_ip: virtual private network indicator ]#########################
    # VPN IP color.
    typeset -g POWERLEVEL9K_VPN_IP_FOREGROUND=81
    # When on VPN, show just an icon without the IP address.
    typeset -g POWERLEVEL9K_VPN_IP_CONTENT_EXPANSION=
    # Regular expression for the VPN network interface. Run ifconfig while on VPN to see the
    # name of the interface.
    typeset -g POWERLEVEL9K_VPN_IP_INTERFACE='(wg|(.*tun))[0-9]*'
    # Icon to show when on VPN.
    typeset -g POWERLEVEL9K_VPN_IP_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER}'

    #########################[ proxy: system-wide http/https/ftp proxy ]##########################
    # Proxy color.
    typeset -g POWERLEVEL9K_PROXY_FOREGROUND=68
    # Custom icon.
    # typeset -g POWERLEVEL9K_PROXY_VISUAL_IDENTIFIER_EXPANSION='⭐'

    ################################[ battery: internal battery ]#################################
    # Show battery in red when it's below this level and not connected to power supply.
    typeset -g POWERLEVEL9K_BATTERY_LOW_THRESHOLD=20
    typeset -g POWERLEVEL9K_BATTERY_LOW_FOREGROUND=160
    # Show battery in green when it's charging or fully charged.
    typeset -g POWERLEVEL9K_BATTERY_{CHARGING,CHARGED}_FOREGROUND=70
    # Show battery in yellow when it's discharging.
    typeset -g POWERLEVEL9K_BATTERY_DISCONNECTED_FOREGROUND=178
    # Battery pictograms going from low to high level of charge.
    typeset -g POWERLEVEL9K_BATTERY_STAGES=$'\uf58d\uf579\uf57a\uf57b\uf57c\uf57d\uf57e\uf57f\uf580\uf581\uf578'
    # Don't show the remaining time to charge/discharge.
    typeset -g POWERLEVEL9K_BATTERY_VERBOSE=false

    ####################################[ time: current time ]####################################
    # Current time color.
    typeset -g POWERLEVEL9K_TIME_FOREGROUND=66
    # Format for the current time: 09:51:02. See `man 3 strftime`.
    typeset -g POWERLEVEL9K_TIME_FORMAT='%D{%H:%M:%S}'
    # If set to true, time will update when you hit enter. This way prompts for the past
    # commands will contain the start times of their commands as opposed to the default
    # behavior where they contain the end times of their preceding commands.
    typeset -g POWERLEVEL9K_TIME_UPDATE_ON_COMMAND=false
    # Custom icon.
    # typeset -g POWERLEVEL9K_TIME_VISUAL_IDENTIFIER_EXPANSION='⭐'
    # Custom prefix.
    # typeset -g POWERLEVEL9K_TIME_PREFIX='%244Fat '

    # Example of a user-defined prompt segment. Function prompt_example will be called on every
    # prompt if `example` prompt segment is added to POWERLEVEL9K_LEFT_PROMPT_ELEMENTS or
    # POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS. It displays an icon and orange text greeting the user.
    #
    # Type `p10k help segment` for documentation and a more sophisticated example.
    function prompt_example() {
      p10k segment -f 208 -i '⭐' -t 'hello, %n'
    }


    # User-defined prompt segments can be customized the same way as built-in segments.
    typeset -g POWERLEVEL9K_EXAMPLE_FOREGROUND=208
    typeset -g POWERLEVEL9K_EXAMPLE_VISUAL_IDENTIFIER_EXPANSION='${P9K_VISUAL_IDENTIFIER}'

    # When instant prompt is disabled, prompt won't appear until zsh is fully initialized.
    # typeset -g POWERLEVEL9K_DISABLE_INSTANT_PROMPT=true
  }

  (( ${#p10k_config_opts} )) && setopt ${p10k_config_opts[@]}
  'builtin' 'unset' 'p10k_config_opts'
  {% endraw %}
